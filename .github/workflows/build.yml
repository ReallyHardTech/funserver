name: Build

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
          version: latest
          distribution: goreleaser-pro
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Install RPM
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm

      - name: Build and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOS: linux
        run: |
          cd fun
          goreleaser release --snapshot --clean --single-target
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: fun/dist/
          retention-days: 5

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
          version: latest
          distribution: goreleaser-pro
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}
          
      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Install WiX
        run: dotnet tool install --global wix

      - name: Build and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOS: windows
        run: |
          cd fun
          goreleaser release --snapshot --clean --single-target
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: fun/dist/
          retention-days: 5

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          check-latest: true
          
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true
          version: latest
          distribution: goreleaser-pro
        env:
          GORELEASER_KEY: ${{ secrets.GORELEASER_KEY }}

      - name: Install Docker and LinuxKit
        run: |
          brew tap linuxkit/linuxkit
          brew install colima docker
          brew install --HEAD linuxkit
          colima start
          sudo ln -sf $HOME/.colima/default/docker.sock /var/run/docker.sock

      - name: Generate and Build LinuxKit Image
        run: |
          cd fun
          go run ./container/generate_linuxkit.go -output .cache/linuxkit/config.yml
          linuxkit build -format kernel+initrd -output .cache/linuxkit .cache/linuxkit/config.yml

      - name: Build and Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOS: darwin
        run: |
          cd fun
          goreleaser release --snapshot --clean --single-target
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: fun/dist/
          retention-days: 5

  create-release:
    needs: [build-linux, build-windows, build-macos]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: combined-artifacts
          pattern: '*-artifacts'
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: combined-artifacts/*
          draft: true
          generate_release_notes: true 